//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub description: String,
    pub location_id: Option<Uuid>,
    pub author_id: Uuid,
    pub created_at: DateTime,
    pub content_type: String,
    pub visibility: String,
    pub content_url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::location::Entity",
        from = "Column::LocationId",
        to = "super::location::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Location,
    #[sea_orm(has_many = "super::post_comment::Entity")]
    PostComment,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_many = "super::post_tag::Entity")]
    PostTag,
    #[sea_orm(has_many = "super::post_visibility::Entity")]
    PostVisibility,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::AuthorId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(has_many = "super::wall_post::Entity")]
    WallPost,
}

impl Related<super::location::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Location.def()
    }
}

impl Related<super::post_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostComment.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::post_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostTag.def()
    }
}

impl Related<super::post_visibility::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostVisibility.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::wall_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WallPost.def()
    }
}

impl Related<super::wall::Entity> for Entity {
    fn to() -> RelationDef {
        super::wall_post::Relation::Wall.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::wall_post::Relation::Post.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
