//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use super::sea_orm_active_enums::UserType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub display_name: String,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub avatar_url: Option<String>,
    pub user_type: UserType,
    pub wall_id: Uuid,
    pub is_blocked: bool,
    pub password_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group::Entity")]
    Group,
    #[sea_orm(has_many = "super::group_join_request::Entity")]
    GroupJoinRequest,
    #[sea_orm(has_many = "super::group_member::Entity")]
    GroupMember,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::post_comment::Entity")]
    PostComment,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_many = "super::post_user_visibility::Entity")]
    PostUserVisibility,
    #[sea_orm(
        belongs_to = "super::wall::Entity",
        from = "Column::WallId",
        to = "super::wall::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Wall,
}

impl Related<super::group_join_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupJoinRequest.def()
    }
}

impl Related<super::group_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMember.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::post_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostComment.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::post_user_visibility::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostUserVisibility.def()
    }
}

impl Related<super::wall::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wall.def()
    }
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        super::group_member::Relation::Group.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::group_member::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
